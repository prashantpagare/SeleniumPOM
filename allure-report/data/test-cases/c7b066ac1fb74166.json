{
  "uid" : "c7b066ac1fb74166",
  "name" : "test_printCarNamesAndPrices[firefox-Hyundai-Hyundai Cars]",
  "fullName" : "test_carwale.Test_Carwale#test_printCarNamesAndPrices",
  "historyId" : "3fb8462cd247370dd9a56349128c77d8",
  "time" : {
    "start" : 1647240642843,
    "stop" : 1647240648599,
    "duration" : 5756
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: Element <img class=\"o-bXKmQE o-cgkaRG o-cQfblS RpK5NQ o-pGqQl o-wBtSi o-bwUciP o-btTZkL o-bfyaNx o-eAZqQI\" src=\"https://imgd.aeplcdn.com/0x0/statics/grey.gif\"> could not be scrolled into view",
  "statusTrace" : "self = <Testcases.test_carwale.Test_Carwale object at 0x01515FE8>\ncarBrand = 'Hyundai', carTitle = 'Hyundai Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\", dataProvider.get_userData(\"Sheet2\"))\n    def test_printCarNamesAndPrices(self, carBrand, carTitle):\n        log.logger.info(\"***** Print Car Names and Prices Test *****\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print((\"Car Title: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not Matching not on the Matching car page\"\n            car.getCarNamesAndPrices()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n            title = car.getCarTitle()\n            print((\"Car Title: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not Matching not on the Matching car page\"\n            car.getCarNamesAndPrices()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print((\"Car Title: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not Matching not on the Matching car page\"\n            car.getCarNamesAndPrices()\n        elif carBrand == \"Hyundai\":\n>           home.gotoNewCars().selectHyundai()\n\ntest_carwale.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\NewCarPage.py:10: in selectHyundai\n    self.click(\"HyundaiCar_XPATH\")\n..\\Pages\\BasePage.py:19: in click\n    self.driver.find_element_by_xpath(configReader.readConfig(\"locators\", locator)).click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x01113028>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"Element <img class=\\\\\"o-bXKmQE o-cgk...dsChild.jsm:203:24\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: Element <img class=\"o-bXKmQE o-cgkaRG o-cQfblS RpK5NQ o-pGqQl o-wBtSi o-bwUciP o-btTZkL o-bfyaNx o-eAZqQI\" src=\"https://imgd.aeplcdn.com/0x0/statics/grey.gif\"> could not be scrolled into view\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "log_on_failure",
    "time" : {
      "start" : 1647240642842,
      "stop" : 1647240642843,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "get_browser",
    "time" : {
      "start" : 1647240634669,
      "stop" : 1647240642842,
      "duration" : 8173
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: Element <img class=\"o-bXKmQE o-cgkaRG o-cQfblS RpK5NQ o-pGqQl o-wBtSi o-bwUciP o-btTZkL o-bfyaNx o-eAZqQI\" src=\"https://imgd.aeplcdn.com/0x0/statics/grey.gif\"> could not be scrolled into view",
    "statusTrace" : "self = <Testcases.test_carwale.Test_Carwale object at 0x01515FE8>\ncarBrand = 'Hyundai', carTitle = 'Hyundai Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\", dataProvider.get_userData(\"Sheet2\"))\n    def test_printCarNamesAndPrices(self, carBrand, carTitle):\n        log.logger.info(\"***** Print Car Names and Prices Test *****\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()\n            print((\"Car Title: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not Matching not on the Matching car page\"\n            car.getCarNamesAndPrices()\n        elif carBrand == \"Honda\":\n            home.gotoNewCars().selectHonda()\n            title = car.getCarTitle()\n            print((\"Car Title: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not Matching not on the Matching car page\"\n            car.getCarNamesAndPrices()\n        elif carBrand == \"Toyota\":\n            home.gotoNewCars().selectToyota()\n            title = car.getCarTitle()\n            print((\"Car Title: \" + title).encode('utf8'))\n            assert title == carTitle, \"Not Matching not on the Matching car page\"\n            car.getCarNamesAndPrices()\n        elif carBrand == \"Hyundai\":\n>           home.gotoNewCars().selectHyundai()\n\ntest_carwale.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\NewCarPage.py:10: in selectHyundai\n    self.click(\"HyundaiCar_XPATH\")\n..\\Pages\\BasePage.py:19: in click\n    self.driver.find_element_by_xpath(configReader.readConfig(\"locators\", locator)).click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x01113028>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"Element <img class=\\\\\"o-bXKmQE o-cgk...dsChild.jsm:203:24\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:91:31\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: Element <img class=\"o-bXKmQE o-cgkaRG o-cQfblS RpK5NQ o-pGqQl o-wBtSi o-bwUciP o-btTZkL o-bfyaNx o-eAZqQI\" src=\"https://imgd.aeplcdn.com/0x0/statics/grey.gif\"> could not be scrolled into view\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d9342336833141c1",
      "name" : "log",
      "source" : "d9342336833141c1.txt",
      "type" : "text/plain",
      "size" : 246
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "log_on_failure::0",
    "time" : {
      "start" : 1647240648648,
      "stop" : 1647240648718,
      "duration" : 70
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "fa34ec5674b82cb0",
      "name" : "login",
      "source" : "fa34ec5674b82cb0.png",
      "type" : "image/png",
      "size" : 101889
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false
  }, {
    "name" : "get_browser::0",
    "time" : {
      "start" : 1647240648719,
      "stop" : 1647240649568,
      "duration" : 849
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"
  }, {
    "name" : "suite",
    "value" : "test_carwale"
  }, {
    "name" : "subSuite",
    "value" : "Test_Carwale"
  }, {
    "name" : "host",
    "value" : "DESKTOP-OEE7BVT"
  }, {
    "name" : "thread",
    "value" : "17964-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_carwale"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "carBrand",
    "value" : "'Hyundai'"
  }, {
    "name" : "carTitle",
    "value" : "'Hyundai Cars'"
  }, {
    "name" : "get_browser",
    "value" : "'firefox'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "78358bb045a90935",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.ElementNotInteractableException: Message: Element <img class=\"o-bXKmQE o-cgkaRG o-cQfblS RpK5NQ o-pGqQl o-wBtSi o-bwUciP o-btTZkL o-bfyaNx o-eAZqQI\" src=\"https://imgd.aeplcdn.com/0x0/statics/grey.gif\"> could not be scrolled into view",
      "time" : {
        "start" : 1647240290129,
        "stop" : 1647240295929,
        "duration" : 5800
      }
    }, {
      "uid" : "9595374c9deeb4f1",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.ElementNotInteractableException: Message: Element <img class=\"o-bXKmQE o-cgkaRG o-cQfblS RpK5NQ o-pGqQl o-wBtSi o-bwUciP o-btTZkL o-bfyaNx o-eAZqQI\" src=\"https://imgd.aeplcdn.com/0x0/statics/grey.gif\"> could not be scrolled into view",
      "time" : {
        "start" : 1647239603272,
        "stop" : 1647239607722,
        "duration" : 4450
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "c82c25582c5c804a",
        "reportUrl" : "http://localhost:8080/job/PageObjectModelPythonFramework/2/allure/#testresult/c82c25582c5c804a",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementNotInteractableException: Message: Element <img class=\"o-bXKmQE o-cgkaRG o-cQfblS RpK5NQ o-pGqQl o-wBtSi o-bwUciP o-btTZkL o-bfyaNx o-eAZqQI\" src=\"https://imgd.aeplcdn.com/0x0/statics/grey.gif\"> could not be scrolled into view",
        "time" : {
          "start" : 1647240290129,
          "stop" : 1647240295929,
          "duration" : 5800
        }
      } ]
    },
    "tags" : [ "@pytest.mark.usefixtures('log_on_failure', 'get_browser')" ]
  },
  "source" : "c7b066ac1fb74166.json",
  "parameterValues" : [ "'Hyundai'", "'Hyundai Cars'", "'firefox'" ]
}